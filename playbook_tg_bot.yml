- name: Download packages
  hosts: all
  become: yes
  tasks:
    - name: Download necessary packages
      apt:
        pkg:
          - git
          - postgresql
          - postgresql-contrib
          - libpq-dev
        update_cache: yes

- name: Setup database on host2
  hosts: host2
  become: yes
  tasks:
    - name: Install Python packages
      apt:
        pkg:
          - python3
          - python3-pip

    - name: Install PostgreSQL client
      apt:
        pkg:
          - postgresql-client

    - name: Clone Git repository
      git:
        repo: "{{ hostvars[inventory_hostname]['GIT'] }}"
        dest: "{{ hostvars[inventory_hostname]['WORKDIR'] }}"

    - name: Install requirements
      pip:
        requirements: "{{ hostvars[inventory_hostname]['WORKDIR'] }}/bot/requirements.txt"

    - name: Send init.sql to host
      copy:
        src: init.sql
        dest: /tmp/init.sql
        owner: postgres
        group: postgres
        mode: '0644'  # Установите нужные права доступа для файла

    - name: Replace DB_DATABASE name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"

    - name: Replace DB_USER name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"

    - name: Replace DB_PASSWORD name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"

    - name: Replace DB_REPL_USER name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"

    - name: Replace DB_REPL_PASSWORD name in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: Update postgresql.conf for replication
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          max_wal_senders = 10
          wal_level = replica
          hot_standby = on
          max_replication_slots = 10
          hot_standby_feedback = on
          log_replication_commands = on

    - name: Update pg_hba.conf for replication
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          local all postgres peer
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

- name: Setup replication on host3
  hosts: host3
  become: true
  tasks:
    - name: Update postgresql.conf for replication
      become: true
      become_user: postgres
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}

    - name: Remove existing database data
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/

    - name: Backup from host2
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -p {{ hostvars[inventory_hostname]['DB_PORT'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }}
      environment:
        PGUSER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: Change ownership of PostgreSQL data
      command: chown -R postgres:postgres /var/lib/postgresql/

    - name: Restart PostgreSQL service for replication
      service:
        name: postgresql
        state: restarted

- name: Start application on host1
  hosts: host1
  become: yes
  tasks:
    - name: Start the bot
      command: python3 "{{ hostvars[inventory_hostname]['WORKDIR'] }}/bot/bot.py"
      environment:
        HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        POSTGRES_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        REPL_HOST: "{{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}"
        PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        POSTGRES_DB: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        POSTGRES_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        POSTGRES_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        POSTGRES_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        POSTGRES_REPL_USER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        POSTGRES_REPL_PASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
        POSTGRES_VERSION: "{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
        PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        ROOT_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"

      command: python3 /usr/src/bot/bot.py
